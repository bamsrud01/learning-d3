D3 stands for 'Data-Driven Documents'

D3 Selections - Wrapped in D3 selection prototype methods
  d3.select('div') - selects first matching element
  d3.selectAll('div') - returns array of all matching elements

Change style of elements
  d3.select('div').style('color', 'orange') - Changes the text in div to orange
  d3.select('div').style({'color': 'blue', 'font-size': '40px'}) - Changes multiple styles

Classed method.  Returns true or false if the element has the class
  d3.selectAll('.house').classed('house') -> true
    -Note that ALL elements in this selection must have the class to return true
  Can also ASSIGN classes by adding true as a second argument
    d3.selectAll('div').classed('frog', true)
  Or REMOVE class by adding false
    d3.selectAll('div').classed('house', false)


SVG = Scalable Vector Graphics
  -Examples include circles and lines
  -In D3, SVGs can be created and modified:
    mySVG = d3.select('body').append('svg');
    mySVG.append('circle');
    mySVG.attr('cx', 200).attr('cy', 200);

Asynchronous request methods in D3 (AJAX)
  -Methods include: d3.json, d3.csv, d3.text, d3.html, d3.tsv, and d3.xml
    d3.csv('climate_data.csv', function(error, data) {
      console.log(error);   //  Will be null if no error
      console.log(data);    //  Will display returned data
    });
    -CSV files will be returned as an array of objects.  Each item in the array is a row, and is an object with properties of column names, and values of that row

Data Binding
  -Elements in the DOM can be created based on specific data, and the bound data can be accessed from the element itself
  -This allows elements to have unique attributes based on the specific data
  -Example:

      //  Create an empty svg element with id of 'viz'
      var viz = d3.select("#viz-wrapper")
        .append('svg')
        .attr('id', 'viz');

      //  Ghost selection - making an empty selection:
      d3.csv('climate_data.csv', function(data) {

        dots = viz.selectAll('circle')  //  There are no circle elements within the 'viz' element, so this is a ghost selection
                     .data(data)  //  Bind all the data (from the callback arguments) to circles (but there are none yet)
                     .enter()   //  Selects all elements from data that were not matched to an element in the DOM
                    .append('circle');    //  Appends a new 'circle' element with bound data from all elements return from .data() method

      //  TMAX is a property of the data, a number representing the temperature for each element
       dots.attr('r', function(d) {return d.TMAX});

       dots.attr('r', function(d) {return Math.abs(d.TMAX)});

       dots.attr('r', function(d) {return Math.abs(d.TMAX) / 100});

    });
